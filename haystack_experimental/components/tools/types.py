from abc import ABC, abstractmethod
from typing import Any, Dict, List


class Tool(ABC):
    @abstractmethod
    def invoke(self, fc_payload: Dict[str, Any]) -> Dict[str, Any]:
        """
        Invokes the underlying tool with the function calling payload generated by the chat generator.

        :param fc_payload: The function calling payload generated by the chat generator.
        :returns: The response from the service after invoking the function.
        """
        pass

    @abstractmethod
    def get_tools_definitions(self) -> List[Dict[str, Any]]:
        """
        Get the tools definitions used as tools LLM parameter.

        :returns: The tools definitions passed to the LLM as tools parameter.
        """
        pass
