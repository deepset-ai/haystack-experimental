import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from haystack import logging
from haystack.utils import Secret
from haystack.utils.url_validation import is_valid_http_url

from haystack_experimental.components.tools.openapi._openapi import (
    ClientConfiguration,
    OpenAPIServiceClient,
)
from haystack_experimental.components.tools.openapi.types import OpenAPISpecification, LLMProvider
from haystack_experimental.components.tools.types import Tool

logger = logging.getLogger(__name__)


class OpenAPISpecTool(Tool):
    def __init__(
        self,
        llm_provider: LLMProvider,
        spec: Union[str, Path],
        credentials: Optional[Secret] = None,
        allowed_operations: Optional[List[str]] = None,
    ):
        self.spec = spec
        self.credentials = credentials
        self.allowed_operations = allowed_operations
        self.llm_provider = llm_provider
        self.config_openapi = None
        self.open_api_service = None

        if os.path.isfile(spec):
            openapi_spec = OpenAPISpecification.from_file(spec)
        elif is_valid_http_url(str(spec)):
            openapi_spec = OpenAPISpecification.from_url(str(spec))
        else:
            raise ValueError(f"Invalid OpenAPI specification source {spec}. Expected valid file path or URL")

        self.config_openapi = ClientConfiguration(
            openapi_spec=openapi_spec,
            credentials=credentials.resolve_value() if credentials else None,
            llm_provider=self.llm_provider,
            operations_filter=(lambda f: f["operationId"] in allowed_operations) if allowed_operations else None,
        )
        self.open_api_service = OpenAPIServiceClient(self.config_openapi)

    def invoke(self, fc_payload: Dict[str, Any]) -> Dict[str, Any]:
        """
        Invokes the underlying OpenAPI service/tool with the function calling payload generated by the chat generator.

        :param fc_payload: The function calling payload generated by the chat generator.
        :returns: The response from the service after invoking the function.
        """
        try:
            return self.open_api_service.invoke(fc_payload)
        except Exception as e:
            return {"error": str(e)}

    def get_tools_definitions(self) -> List[Dict[str, Any]]:
        """
        Get the tools definitions used as tools LLM parameter.

        :returns: The tools definitions passed to the LLM as tools parameter.
        """
        return self.config_openapi.get_tools_definitions()
