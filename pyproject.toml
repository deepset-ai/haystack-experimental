[build-system]
requires = ["hatchling>=1.8.0"]
build-backend = "hatchling.build"

[project]
name = "haystack-experimental"
dynamic = ["version"]
version = "0.0.0.dev0"
description = "Experimental components and features for the Haystack LLM framework."
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.8"
authors = [{ name = "deepset.ai", email = "malte.pietsch@deepset.ai" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: Freely Distributable",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = ["haystack-ai"]

[tool.hatch.envs.default]
dependencies = [
  "pre-commit",
  # Type check
  "mypy",
  # Test
  "pytest",
  "pytest-cov",
  "pytest-custom_exit_code", # used in the CI
  "pytest-asyncio",
  "pytest-rerunfailures",
  "responses",
  "tox",
  "coverage",
  "python-multipart",
  "psutil",
  # Linting
  "pylint",
  "ruff",
  # Documentation
  "toml",
  "reno",
  # dulwich is a reno dependency, they pin it at >=0.15.0 so pip takes ton of time to resolve the dependency tree.
  # We pin it here to avoid taking too much time.
  # https://opendev.org/openstack/reno/src/branch/master/requirements.txt#L7
  "dulwich>=0.21.0,<1.0.0",
  # Version specified following Black stability policy:
  # https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy
  "black[jupyter]~=23.0",
]

[tool.hatch.envs.default.scripts]
format = "black ."
format-check = "black --check ."

[tool.hatch.envs.test]
extra-dependencies = []

[tool.hatch.envs.test.scripts]
e2e = "pytest e2e"
unit = 'pytest --cov-report xml:coverage.xml --cov="haystack-experimental" -m "not integration" {args:test}'
integration = 'pytest --maxfail=5 -m "integration" {args:test}'
integration-mac = 'pytest --maxfail=5 -m "integration" -k "not tika" {args:test}'
integration-windows = 'pytest --maxfail=5 -m "integration" -k "not tika" {args:test}'
types = "mypy --install-types --non-interactive --cache-dir=.mypy_cache/ {args:haystack-experimental}"
lint = [
  "ruff check {args:haystack-experimental}",
  "pylint -ry -j 0 {args:haystack-experimental}",
]
lint-fix = ["black .", "ruff check {args:haystack-experimental} --fix"]

[tool.hatch.envs.readme]
detached = true                         # To avoid installing the dependencies from the default environment
dependencies = ["haystack-pydoc-tools"]

[tool.hatch.envs.readme.scripts]
sync = "./.github/utils/pydoc-markdown.sh"
delete-outdated = "python ./.github/utils/delete_outdated_docs.py {args}"

[tool.hatch.envs.snippets]
extra-dependencies = ["torch", "pydantic"]

[project.urls]
"CI: GitHub" = "https://github.com/deepset-ai/haystack-experimental/actions"
"GitHub: issues" = "https://github.com/deepset-ai/haystack-experimental/issues"
"GitHub: repo" = "https://github.com/deepset-ai/haystack-experimental"
Homepage = "https://github.com/deepset-ai/haystack-experimental"

[tool.hatch.version]
path = "VERSION.txt"
pattern = "(?P<version>.+)"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
include = ["/haystack-experimental", "/VERSION.txt"]

[tool.hatch.build.targets.wheel]
packages = ["haystack-experimental"]

[tool.black]
line-length = 120
skip_magic_trailing_comma = true # For compatibility with pydoc>=4.6, check if still needed.

[tool.codespell]
ignore-words-list = "ans,astroid,nd,ned,nin,ue,rouge,ist"
quiet-level = 3
skip = "test/nodes/*,test/others/*,test/samples/*,e2e/*"

[tool.pylint.'MESSAGES CONTROL']
max-line-length = 120
disable = [

  # To keep
  "fixme",
  "c-extension-no-member",

  # To review:
  "missing-docstring",
  "unused-argument",
  "no-member",
  "line-too-long",
  "protected-access",
  "too-few-public-methods",
  "raise-missing-from",
  "invalid-name",
  "duplicate-code",
  "arguments-differ",
  "consider-using-f-string",
  "no-else-return",
  "attribute-defined-outside-init",
  "super-with-arguments",
  "redefined-builtin",
  "abstract-method",
  "unspecified-encoding",
  "unidiomatic-typecheck",
  "no-name-in-module",
  "consider-using-with",
  "redefined-outer-name",
  "arguments-renamed",
  "unnecessary-pass",
  "broad-except",
  "unnecessary-comprehension",
  "subprocess-run-check",
  "singleton-comparison",
  "consider-iterating-dictionary",
  "undefined-loop-variable",
  "consider-using-in",
  "bare-except",
  "unexpected-keyword-arg",
  "simplifiable-if-expression",
  "use-list-literal",
  "broad-exception-raised",

  # To review later
  "cyclic-import",
  "import-outside-toplevel",
  "deprecated-method",
]
[tool.pylint.'DESIGN']
max-args = 38           # Default is 5
max-attributes = 28     # Default is 7
max-branches = 34       # Default is 12
max-locals = 45         # Default is 15
max-module-lines = 2468 # Default is 1000
max-nested-blocks = 9   # Default is 5
max-statements = 206    # Default is 50
[tool.pylint.'SIMILARITIES']
min-similarity-lines = 6

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--strict-markers"
markers = [
  "unit: unit tests",
  "integration: integration tests",

  "generator: generator tests",
  "summarizer: summarizer tests",
  "embedding_dim: uses a document store with non-default embedding dimension (e.g @pytest.mark.embedding_dim(128))",

  "tika: requires Tika container",
  "parsr: requires Parsr container",
  "ocr: requires Tesseract",

  "elasticsearch: requires Elasticsearch container",
  "weaviate: requires Weaviate container",
  "pinecone: requires Pinecone credentials",
  "faiss: uses FAISS",
  "opensearch",
  "document_store",
]
log_cli = true

[tool.mypy]
warn_return_any = false
warn_unused_configs = true
ignore_missing_imports = true

[tool.ruff]
line-length = 301
target-version = "py38"
exclude = ["test"]


[tool.ruff.lint]
select = [
  "ASYNC", # flake8-async
  "C4",    # flake8-comprehensions
  "C90",   # McCabe cyclomatic complexity
  "E501",  # Long lines
  "EXE",   # flake8-executable
  "F",     # Pyflakes
  "INT",   # flake8-gettext
  "PERF",  # Perflint
  "PL",    # Pylint
  "Q",     # flake8-quotes
  "SIM",   # flake8-simplify
  "SLOT",  # flake8-slots
  "T10",   # flake8-debugger
  "W",     # pycodestyle
  "YTT",   # flake8-2020
  "I",     # isort
  # built-in shadowing
  "A001", # builtin-variable-shadowing
  "A002", # builtin-argument-shadowing
  "A003", # builtin-attribute-shadowing
  # docstring rules
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D209", # Closing triple quotes go to new line
  "D205", # 1 blank line required between summary line and description
  "D213", # summary lines must be positioned on the second physical line of the docstring
  "D417", # undocumented-parameter
  "D419", # undocumented-returns
]

ignore = [
  "F401",    # unused-import
  "PERF203", # `try`-`except` within a loop incurs performance overhead
  "PERF401", # Use a list comprehension to create a transformed list
  "PLR1714", # repeated-equality-comparison
  "PLR5501", # collapsible-else-if
  "PLW0603", # global-statement
  "PLW1510", # subprocess-run-without-check
  "PLW2901", # redefined-loop-name
  "SIM108",  # if-else-block-instead-of-if-exp
  "SIM115",  # open-file-with-context-handler
  "SIM118",  # in-dict-keys
]

[tool.ruff.lint.mccabe]
max-complexity = 28

[tool.ruff.lint.per-file-ignores]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["float", "int", "str"]
max-args = 14                                     # Default is 5
max-branches = 21                                 # Default is 12
max-public-methods = 20                           # Default is 20
max-returns = 7                                   # Default is 6
max-statements = 60                               # Default is 50
