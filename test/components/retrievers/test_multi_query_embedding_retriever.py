# SPDX-FileCopyrightText: 2022-present deepset GmbH <info@deepset.ai>
#
# SPDX-License-Identifier: Apache-2.0

import pytest
from unittest.mock import Mock, patch
from haystack import Document, Pipeline
from haystack.components.embedders import SentenceTransformersTextEmbedder
from haystack.components.embedders.sentence_transformers_document_embedder import SentenceTransformersDocumentEmbedder
from haystack.components.retrievers import InMemoryEmbeddingRetriever
from haystack.components.writers import DocumentWriter
from haystack.document_stores.in_memory import InMemoryDocumentStore
from haystack.document_stores.types import DuplicatePolicy

from haystack_experimental.components.retrievers.multi_query_embedding_retriever import MultiQueryEmbeddingRetriever


class TestMultiQueryEmbeddingRetriever:
    """Test class for MultiQueryEmbeddingRetriever component."""

    @pytest.fixture
    def sample_documents(self):
        """Create sample documents for testing."""
        return [
            Document(content="Renewable energy is energy that is collected from renewable resources."),
            Document(content="Solar energy is a type of green energy that is harnessed from the sun."),
            Document(content="Wind energy is another type of green energy that is generated by wind turbines."),
            Document(content="Hydropower is a form of renewable energy using the flow of water to generate electricity."),
            Document(content="Geothermal energy is heat that comes from the sub-surface of the earth."),
            Document(content="Fossil fuels, such as coal, oil, and natural gas, are non-renewable energy sources."),
            Document(content="Nuclear energy is produced through nuclear reactions, typically using uranium or plutonium as fuel."),
        ]

    @pytest.fixture
    def document_store_with_embeddings(self, sample_documents):
        """Create a document store populated with embedded documents."""
        document_store = InMemoryDocumentStore()
        doc_embedder = SentenceTransformersDocumentEmbedder(model="sentence-transformers/all-MiniLM-L6-v2")
        doc_embedder.warm_up()
        doc_writer = DocumentWriter(document_store=document_store, policy=DuplicatePolicy.SKIP)
        
        embedded_docs = doc_embedder.run(sample_documents)["documents"]
        doc_writer.run(documents=embedded_docs)
        return document_store

    @pytest.fixture
    def mock_retriever(self):
        """Create a mock retriever for testing."""
        retriever = Mock()
        retriever.run = Mock()
        return retriever

    @pytest.fixture
    def mock_query_embedder(self):
        """Create a mock query embedder for testing."""
        embedder = Mock()
        embedder.run = Mock()
        embedder.warm_up = Mock()
        return embedder

    def test_init_with_default_parameters(self, mock_retriever, mock_query_embedder):
        """Test initialization with default parameters."""
        retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder
        )
        
        assert retriever.retriever == mock_retriever
        assert retriever.query_embedder == mock_query_embedder
        assert retriever.top_k == 3
        assert retriever.filters is None
        assert retriever.max_workers == 3
        # Should call warm_up if available
        mock_query_embedder.warm_up.assert_called_once()

    def test_init_with_custom_parameters(self, mock_retriever, mock_query_embedder):
        """Test initialization with custom parameters."""
        filters = {"category": "energy"}
        retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder,
            top_k=5,
            filters=filters,
            max_workers=2
        )
        
        assert retriever.retriever == mock_retriever
        assert retriever.query_embedder == mock_query_embedder
        assert retriever.top_k == 5
        assert retriever.filters == filters
        assert retriever.max_workers == 2

    def test_init_without_warm_up_method(self, mock_retriever):
        """Test initialization with embedder that doesn't have warm_up method."""
        embedder = Mock()
        embedder.run = Mock()
        # No warm_up method
        
        retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=embedder
        )
        
        assert retriever.query_embedder == embedder

    def test_run_with_single_query(self, document_store_with_embeddings):
        """Test running with a single query."""
        in_memory_retriever = InMemoryEmbeddingRetriever(document_store=document_store_with_embeddings)
        query_embedder = SentenceTransformersTextEmbedder(model="sentence-transformers/all-MiniLM-L6-v2")
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=in_memory_retriever,
            query_embedder=query_embedder,
            top_k=2
        )
        
        result = multi_retriever.run(queries=["renewable energy"])
        
        assert "documents" in result
        assert len(result["documents"]) <= 2
        assert all(isinstance(doc, Document) for doc in result["documents"])
        # Documents should be sorted by score (highest first)
        scores = [doc.score for doc in result["documents"] if doc.score is not None]
        assert scores == sorted(scores, reverse=True)

    def test_run_with_multiple_queries(self, document_store_with_embeddings):
        """Test running with multiple queries."""
        in_memory_retriever = InMemoryEmbeddingRetriever(document_store=document_store_with_embeddings)
        query_embedder = SentenceTransformersTextEmbedder(model="sentence-transformers/all-MiniLM-L6-v2")
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=in_memory_retriever,
            query_embedder=query_embedder,
            top_k=2
        )
        
        queries = ["renewable energy", "solar power", "wind turbines"]
        result = multi_retriever.run(queries=queries)
        
        assert "documents" in result
        assert len(result["documents"]) > 0
        assert all(isinstance(doc, Document) for doc in result["documents"])
        # Documents should be sorted by score (highest first)
        scores = [doc.score for doc in result["documents"] if doc.score is not None]
        assert scores == sorted(scores, reverse=True)

    def test_run_with_deduplication(self, document_store_with_embeddings):
        """Test that duplicate documents are removed based on content."""
        in_memory_retriever = InMemoryEmbeddingRetriever(document_store=document_store_with_embeddings)
        query_embedder = SentenceTransformersTextEmbedder(model="sentence-transformers/all-MiniLM-L6-v2")
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=in_memory_retriever,
            query_embedder=query_embedder,
            top_k=3
        )
        
        # Use queries that might return the same documents
        queries = ["renewable energy", "green energy", "sustainable energy"]
        result = multi_retriever.run(queries=queries)
        
        assert "documents" in result
        # Check that no duplicate content exists
        contents = [doc.content for doc in result["documents"]]
        assert len(contents) == len(set(contents))

    def test_run_with_custom_top_k(self, document_store_with_embeddings):
        """Test running with custom top_k parameter."""
        in_memory_retriever = InMemoryEmbeddingRetriever(document_store=document_store_with_embeddings)
        query_embedder = SentenceTransformersTextEmbedder(model="sentence-transformers/all-MiniLM-L6-v2")
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=in_memory_retriever,
            query_embedder=query_embedder,
            top_k=1
        )
        
        result = multi_retriever.run(queries=["energy"], top_k=5)
        
        assert "documents" in result
        # Should respect the custom top_k from run method
        assert len(result["documents"]) <= 5

    def test_run_with_filters(self, document_store_with_embeddings):
        """Test running with filters."""
        in_memory_retriever = InMemoryEmbeddingRetriever(document_store=document_store_with_embeddings)
        query_embedder = SentenceTransformersTextEmbedder(model="sentence-transformers/all-MiniLM-L6-v2")
        filters = {"category": "renewable"}
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=in_memory_retriever,
            query_embedder=query_embedder,
            filters=filters
        )
        
        result = multi_retriever.run(queries=["energy"])
        
        assert "documents" in result
        # The retriever should have been called with filters

    def test_run_with_empty_queries(self, mock_retriever, mock_query_embedder):
        """Test running with empty queries list."""
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder
        )
        
        result = multi_retriever.run(queries=[])
        
        assert "documents" in result
        assert result["documents"] == []

    def test_run_with_no_results(self, mock_retriever, mock_query_embedder):
        """Test running when retriever returns no results."""
        mock_query_embedder.run.return_value = {"embedding": [0.1, 0.2, 0.3]}
        mock_retriever.run.return_value = {"documents": []}
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder
        )
        
        result = multi_retriever.run(queries=["nonexistent query"])
        
        assert "documents" in result
        assert result["documents"] == []

    def test_run_with_none_results(self, mock_retriever, mock_query_embedder):
        """Test running when retriever returns None."""
        mock_query_embedder.run.return_value = {"embedding": [0.1, 0.2, 0.3]}
        mock_retriever.run.return_value = None
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder
        )
        
        result = multi_retriever.run(queries=["query"])
        
        assert "documents" in result
        assert result["documents"] == []

    def test_run_with_missing_documents_key(self, mock_retriever, mock_query_embedder):
        """Test running when retriever returns result without documents key."""
        mock_query_embedder.run.return_value = {"embedding": [0.1, 0.2, 0.3]}
        mock_retriever.run.return_value = {"other_key": "value"}
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder
        )
        
        result = multi_retriever.run(queries=["query"])
        
        assert "documents" in result
        assert result["documents"] == []

    def test_run_on_thread_method(self, mock_retriever, mock_query_embedder):
        """Test the _run_on_thread method directly."""
        mock_query_embedder.run.return_value = {"embedding": [0.1, 0.2, 0.3]}
        mock_retriever.run.return_value = {"documents": [Document(content="test")]}
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder
        )
        
        result = multi_retriever._run_on_thread("test query", top_k=1, filters=None)
        
        assert result == [Document(content="test")]
        mock_query_embedder.run.assert_called_once_with(text="test query")
        mock_retriever.run.assert_called_once_with(
            query_embedding=[0.1, 0.2, 0.3],
            filters=None,
            top_k=1
        )

    def test_run_on_thread_with_none_result(self, mock_retriever, mock_query_embedder):
        """Test _run_on_thread method when retriever returns None."""
        mock_query_embedder.run.return_value = {"embedding": [0.1, 0.2, 0.3]}
        mock_retriever.run.return_value = None
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder
        )
        
        result = multi_retriever._run_on_thread("test query", top_k=1, filters=None)
        
        assert result is None

    def test_run_on_thread_with_no_documents(self, mock_retriever, mock_query_embedder):
        """Test _run_on_thread method when retriever returns empty documents."""
        mock_query_embedder.run.return_value = {"embedding": [0.1, 0.2, 0.3]}
        mock_retriever.run.return_value = {"documents": []}
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder
        )
        
        result = multi_retriever._run_on_thread("test query", top_k=1, filters=None)
        
        assert result == []

    def test_parallel_execution(self, document_store_with_embeddings):
        """Test that multiple queries are executed in parallel."""
        in_memory_retriever = InMemoryEmbeddingRetriever(document_store=document_store_with_embeddings)
        query_embedder = SentenceTransformersTextEmbedder(model="sentence-transformers/all-MiniLM-L6-v2")
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=in_memory_retriever,
            query_embedder=query_embedder,
            max_workers=2
        )
        
        queries = ["renewable energy", "solar power", "wind energy", "geothermal"]
        result = multi_retriever.run(queries=queries)
        
        assert "documents" in result
        assert len(result["documents"]) > 0

    def test_to_dict(self, mock_retriever, mock_query_embedder):
        """Test serialization to dictionary."""
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder,
            top_k=5,
            filters={"category": "test"},
            max_workers=2
        )
        
        result = multi_retriever.to_dict()
        
        assert "type" in result
        assert "init_parameters" in result
        assert result["init_parameters"]["top_k"] == 5
        assert result["init_parameters"]["filters"] == {"category": "test"}
        assert result["init_parameters"]["max_workers"] == 2
        assert "retriever" in result["init_parameters"]
        assert "query_embedder" in result["init_parameters"]

    def test_from_dict(self, mock_retriever, mock_query_embedder):
        """Test deserialization from dictionary."""
        # Mock the deserialize_component_inplace function
        with patch('haystack_experimental.components.retrievers.multi_query_retriever.deserialize_component_inplace'):
            data = {
                "type": "haystack_experimental.components.retrievers.multi_query_retriever.MultiQueryEmbeddingRetriever",
                "init_parameters": {
                    "retriever": {"type": "mock_retriever", "init_parameters": {}},
                    "query_embedder": {"type": "mock_embedder", "init_parameters": {}},
                    "top_k": 5,
                    "filters": {"category": "test"},
                    "max_workers": 2
                }
            }
            
            result = MultiQueryEmbeddingRetriever.from_dict(data)
            
            assert isinstance(result, MultiQueryEmbeddingRetriever)
            assert result.top_k == 5
            assert result.filters == {"category": "test"}
            assert result.max_workers == 2

    def test_pipeline_integration(self, document_store_with_embeddings):
        """Test integration with Haystack Pipeline."""
        in_memory_retriever = InMemoryEmbeddingRetriever(document_store=document_store_with_embeddings)
        query_embedder = SentenceTransformersTextEmbedder(model="sentence-transformers/all-MiniLM-L6-v2")
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=in_memory_retriever,
            query_embedder=query_embedder
        )
        
        pipeline = Pipeline()
        pipeline.add_component("multi_retriever", multi_retriever)
        
        result = pipeline.run(data={"multi_retriever": {"queries": ["renewable energy", "solar power"]}})
        
        assert "multi_retriever" in result
        assert "documents" in result["multi_retriever"]
        assert len(result["multi_retriever"]["documents"]) > 0

    def test_document_sorting_by_score(self, document_store_with_embeddings):
        """Test that documents are properly sorted by score in descending order."""
        in_memory_retriever = InMemoryEmbeddingRetriever(document_store=document_store_with_embeddings)
        query_embedder = SentenceTransformersTextEmbedder(model="sentence-transformers/all-MiniLM-L6-v2")
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=in_memory_retriever,
            query_embedder=query_embedder,
            top_k=10
        )
        
        result = multi_retriever.run(queries=["energy"])
        
        assert "documents" in result
        documents = result["documents"]
        
        # Check that documents are sorted by score (highest first)
        scores = [doc.score for doc in documents if doc.score is not None]
        if len(scores) > 1:
            assert scores == sorted(scores, reverse=True)

    def test_embedding_retrieval_process(self, mock_retriever, mock_query_embedder):
        """Test the complete embedding retrieval process."""
        mock_query_embedder.run.return_value = {"embedding": [0.1, 0.2, 0.3, 0.4, 0.5]}
        mock_retriever.run.return_value = {
            "documents": [
                Document(content="Test document 1", score=0.9),
                Document(content="Test document 2", score=0.8)
            ]
        }
        
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder
        )
        
        result = multi_retriever.run(queries=["test query"])
        
        assert "documents" in result
        assert len(result["documents"]) == 2
        assert result["documents"][0].content == "Test document 1"
        assert result["documents"][1].content == "Test document 2"
        
        # Verify that embedder was called with the query
        mock_query_embedder.run.assert_called_with(text="test query")
        
        # Verify that retriever was called with the embedding
        mock_retriever.run.assert_called_with(
            query_embedding=[0.1, 0.2, 0.3, 0.4, 0.5],
            filters=None,
            top_k=3
        )

    def test_filters_parameter_handling(self, mock_retriever, mock_query_embedder):
        """Test that filters are properly passed through the retrieval process."""
        mock_query_embedder.run.return_value = {"embedding": [0.1, 0.2, 0.3]}
        mock_retriever.run.return_value = {"documents": [Document(content="Test")]}
        
        filters = {"category": "energy", "type": "renewable"}
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder,
            filters=filters
        )
        
        result = multi_retriever.run(queries=["test"])
        
        # Verify that retriever was called with the correct filters
        mock_retriever.run.assert_called_with(
            query_embedding=[0.1, 0.2, 0.3],
            filters=filters,
            top_k=3
        )

    def test_custom_top_k_override(self, mock_retriever, mock_query_embedder):
        """Test that custom top_k in run method overrides initialization top_k."""
        mock_query_embedder.run.return_value = {"embedding": [0.1, 0.2, 0.3]}
        mock_retriever.run.return_value = {"documents": [Document(content="Test")]}
        
        multi_retriever = MultiQueryEmbeddingRetriever(
            retriever=mock_retriever,
            query_embedder=mock_query_embedder,
            top_k=5  # Initialize with top_k=5
        )
        
        result = multi_retriever.run(queries=["test"], top_k=2)  # Override with top_k=2
        
        # Verify that retriever was called with the overridden top_k
        mock_retriever.run.assert_called_with(
            query_embedding=[0.1, 0.2, 0.3],
            filters=None,
            top_k=2  # Should use the overridden value
        )
